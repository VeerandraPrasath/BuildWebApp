name: Build Web App

on:
  workflow_dispatch:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies
        run: dotnet restore

      - id: build
        name: Build
        run: dotnet build --no-restore

      - id: test
        if: steps.build.outcome == 'success'
        name: Test with Coverage
        run: dotnet test "BuildWebApp.Tests/BuildWebApp.Tests.csproj" --collect:"XPlat Code Coverage" --results-directory TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Debug TestResults
        run: |
          Write-Host "Listing TestResults directory:"
          Get-ChildItem -Recurse TestResults -ErrorAction SilentlyContinue
          Write-Host "Searching for cobertura files:"
          Get-ChildItem -Recurse -Filter *.cobertura.xml

      - name: Code Coverage Summary (Windows)
        run: |
          $coverageFiles = Get-ChildItem -Recurse -Filter *.cobertura.xml
          if ($coverageFiles.Count -eq 0) {
              Write-Host "No coverage files found."
              exit 0
          }
      
          foreach ($file in $coverageFiles) {
              Write-Host "Coverage file: $($file.FullName)"
          }
      
          Write-Host "You can use ReportGenerator (dotnet tool) to generate a readable summary."


      - id: publish
        name: Publish
        run: dotnet publish BuildWebApp/BuildWebApp.csproj -c Release -o published --self-contained -r win-x64 /p:UseAppHost=true


      - name: Zip Artifact
        run: Compress-Archive -Path published\* -DestinationPath app.zip

      - id: upload
        name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-webapp
          path: app.zip

      - id: deploy
        name: Deploy & Install as Windows Service
        run: |
          # Stop and remove existing service
          $serviceName = "BuildWebApp"
          Write-Host "Stopping and removing existing service..."
          Stop-Service $serviceName -ErrorAction SilentlyContinue
          sc.exe delete $serviceName -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 2
      
          # Deployment folder
          $deployDir = "$env:USERPROFILE\BuildWebApp_deploy"
          if (!(Test-Path $deployDir)) { New-Item -ItemType Directory -Path $deployDir -Force }
      
          # Copy published files
          Write-Host "Copying published files to $deployDir..."
          Copy-Item -Path ".\published\*" -Destination $deployDir -Recurse -Force
      
          # Install as Windows Service
          $exePath = Join-Path $deployDir "BuildWebApp.exe"
          if (Test-Path $exePath) {
              Write-Host "Installing as Windows Service..."
              New-Service -Name $serviceName -BinaryPathName "`"$exePath`" --urls http://0.0.0.0:5000" -DisplayName "Build Web App" -StartupType Automatic -ErrorAction Stop
          } else {
              # If no exe, use dotnet with the DLL
              $dllPath = Join-Path $deployDir "BuildWebApp.dll"
              Write-Host "Installing as Windows Service using dotnet..."
              sc.exe create $serviceName binPath= "dotnet `"$dllPath`" --urls http://0.0.0.0:5000" start= auto
          }
      
          # Start the service
          Write-Host "Starting service..."
          Start-Service $serviceName
          Write-Host "Service status: $(Get-Service $serviceName | Select-Object -ExpandProperty Status)"
      
          Write-Host "Deployment complete. App should be running at http://localhost:5000"