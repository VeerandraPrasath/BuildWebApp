name: Build Web App

on:
  workflow_dispatch:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies
        run: dotnet restore

      - id: build
        name: Build
        run: dotnet build --no-restore

      - id: test
        if: steps.build.outcome == 'success'
        name: Test with Coverage
        run: dotnet test "BuildWebApp.Tests/BuildWebApp.Tests.csproj" --collect:"XPlat Code Coverage" --results-directory TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Debug TestResults
        run: |
          Write-Host "Listing TestResults directory:"
          Get-ChildItem -Recurse TestResults -ErrorAction SilentlyContinue
          Write-Host "Searching for cobertura files:"
          Get-ChildItem -Recurse -Filter *.cobertura.xml

      - name: Code Coverage Summary (Windows)
        run: |
          $coverageFiles = Get-ChildItem -Recurse -Filter *.cobertura.xml
          if ($coverageFiles.Count -eq 0) {
              Write-Host "No coverage files found."
              exit 0
          }
      
          foreach ($file in $coverageFiles) {
              Write-Host "Coverage file: $($file.FullName)"
          }
      
          Write-Host "You can use ReportGenerator (dotnet tool) to generate a readable summary."


      - id: publish
        name: Publish
        run: dotnet publish BuildWebApp/BuildWebApp.csproj -c Release -o published --self-contained -r win-x64 /p:UseAppHost=true


      - name: Zip Artifact
        run: Compress-Archive -Path published\* -DestinationPath app.zip

      - id: upload
        name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-webapp
          path: app.zip

      - id: deploy
        name: Deploy & Install as Windows Service
        run: |
          $serviceName = "BuildWebApp"
          $deployDir = "$env:USERPROFILE\BuildWebApp_deploy"
          
          # Stop and remove existing service if it exists
          Write-Host "Checking for existing service..."
          $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
          if ($service) {
              Write-Host "Stopping existing service..."
              Stop-Service $serviceName -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
              Write-Host "Removing existing service..."
              sc.exe delete $serviceName
              Start-Sleep -Seconds 2
          }
      
          # Ensure deployment directory exists
          if (!(Test-Path $deployDir)) { 
              New-Item -ItemType Directory -Path $deployDir -Force 
          }
      
          # Clean deployment directory
          Write-Host "Cleaning deployment directory..."
          Remove-Item "$deployDir\*" -Recurse -Force -ErrorAction SilentlyContinue
      
          # Copy published files
          Write-Host "Copying published files to $deployDir..."
          Copy-Item -Path ".\published\*" -Destination $deployDir -Recurse -Force
      
          # Check what files were copied
          Write-Host "Files in deployment directory:"
          Get-ChildItem $deployDir
      
          # Try different service installation approaches
      
          # Approach 1: Check if it's a self-contained executable
          $exePath = Get-ChildItem -Path $deployDir -Filter "*.exe" | Select-Object -First 1
          if ($exePath) {
              Write-Host "Found EXE file: $($exePath.Name)"
              $binaryPath = "`"$($exePath.FullName)`" --urls http://0.0.0.0:5000"
          } else {
              # Approach 2: Use dotnet with DLL
              $dllPath = Get-ChildItem -Path $deployDir -Filter "*.dll" | Where-Object { $_.Name -notlike "*test*" -and $_.Name -notlike "*Test*" } | Select-Object -First 1
              if ($dllPath) {
                  Write-Host "Found DLL file: $($dllPath.Name)"
                  $binaryPath = "dotnet `"$($dllPath.FullName)`" --urls http://0.0.0.0:5000"
              } else {
                  Write-Error "No executable or DLL found in published output"
                  exit 1
              }
          }
      
          Write-Host "Installing service with binary path: $binaryPath"
      
          # Install the service
          try {
              New-Service -Name $serviceName `
                          -BinaryPathName $binaryPath `
                          -DisplayName "Build Web App" `
                          -Description "Build Web Application Service" `
                          -StartupType Automatic `
                          -ErrorAction Stop
              
              Write-Host "Service installed successfully"
              
              # Grant the service necessary permissions
              sc.exe sdset $serviceName "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)"
              
              # Start the service
              Write-Host "Starting service..."
              Start-Service $serviceName -ErrorAction Stop
              Write-Host "Service started successfully"
              
              # Check service status
              Start-Sleep -Seconds 3
              $serviceStatus = Get-Service $serviceName
              Write-Host "Service status: $($serviceStatus.Status)"
              
              # If service failed to start, check event logs
              if ($serviceStatus.Status -ne "Running") {
                  Write-Host "Checking application event logs for errors..."
                  Get-EventLog -LogName Application -Source "Service Control Manager" -Newest 10 | 
                      Where-Object { $_.Message -like "*$serviceName*" } | 
                      Format-Table TimeGenerated, EntryType, Message -AutoSize
              }
              
          } catch {
              Write-Host "Error: $($_.Exception.Message)"
              Write-Host "Checking system events for details..."
              Get-EventLog -LogName System -Newest 5 | Format-Table TimeGenerated, EntryType, Source, Message -AutoSize
              exit 1
          }
      
          Write-Host "Deployment complete. App should be running at http://localhost:5000"