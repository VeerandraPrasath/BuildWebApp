name: Build Web App

on:
  workflow_dispatch:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies
        run: dotnet restore

      - id: build
        name: Build
        run: dotnet build --no-restore

      - id: test
        if: steps.build.outcome == 'success'
        name: Test with Coverage
        run: dotnet test "BuildWebApp.Tests/BuildWebApp.Tests.csproj" --collect:"XPlat Code Coverage" --results-directory TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Debug TestResults
        run: |
          Write-Host "Listing TestResults directory:"
          Get-ChildItem -Recurse TestResults -ErrorAction SilentlyContinue
          Write-Host "Searching for cobertura files:"
          Get-ChildItem -Recurse -Filter *.cobertura.xml

      - name: Code Coverage Summary (Windows)
        run: |
          $coverageFiles = Get-ChildItem -Recurse -Filter *.cobertura.xml
          if ($coverageFiles.Count -eq 0) {
              Write-Host "No coverage files found."
              exit 0
          }
      
          foreach ($file in $coverageFiles) {
              Write-Host "Coverage file: $($file.FullName)"
          }
      
          Write-Host "You can use ReportGenerator (dotnet tool) to generate a readable summary."


      - id: publish
        name: Publish
        run: dotnet publish "BuildWebApp/BuildWebApp.csproj" -c Release -o published --self-contained -r win-x64 /p:UseAppHost=true

      - name: Zip Artifact
        run: Compress-Archive -Path published\* -DestinationPath app.zip

      - id: upload
        name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-webapp
          path: app.zip

      - id: deploy
        name: Deploy & Run Locally (Self-Host)
        run: |
          $deployDir = "$env:USERPROFILE\BuildWebApp_deploy"

          # Stop any running instance
          $processes = Get-Process -Name BuildWebApp -ErrorAction SilentlyContinue
          if ($processes) {
            Write-Host "Stopping running BuildWebApp process..."
            $processes | Stop-Process -Force
          }

          # Ensure deployment folder exists
          if (!(Test-Path $deployDir)) { New-Item -ItemType Directory -Path $deployDir }

          # Copy published files
          Copy-Item -Path "published\*" -Destination $deployDir -Recurse -Force

          # Start the app in background
          Write-Host "Starting BuildWebApp locally..."
          Start-Process -FilePath "dotnet" -ArgumentList "$deployDir\BuildWebApp.dll --urls http://localhost:5000" -NoNewWindow

          Write-Host "Deployment complete. App running at http://localhost:5000"
