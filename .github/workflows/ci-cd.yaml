name: Build Web App

on:
  workflow_dispatch:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies
        run: dotnet restore

      - id: build
        name: Build
        run: dotnet build --no-restore

      - id: test
        if: steps.build.outcome == 'success'
        name: Test with Coverage
        run: dotnet test "BuildWebApp.Tests/BuildWebApp.Tests.csproj" --collect:"XPlat Code Coverage" --results-directory TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Debug TestResults
        run: |
          Write-Host "Listing TestResults directory:"
          Get-ChildItem -Recurse TestResults -ErrorAction SilentlyContinue
          Write-Host "Searching for cobertura files:"
          Get-ChildItem -Recurse -Filter *.cobertura.xml

      - name: Code Coverage Summary (Windows)
        run: |
          $coverageFiles = Get-ChildItem -Recurse -Filter *.cobertura.xml
          if ($coverageFiles.Count -eq 0) {
              Write-Host "No coverage files found."
              exit 0
          }
      
          foreach ($file in $coverageFiles) {
              Write-Host "Coverage file: $($file.FullName)"
          }
      
          Write-Host "You can use ReportGenerator (dotnet tool) to generate a readable summary."


      - id: publish
        name: Publish
        run: dotnet publish BuildWebApp/BuildWebApp.csproj -c Release -o published --self-contained -r win-x64 /p:UseAppHost=true


      - name: Zip Artifact
        run: Compress-Archive -Path published\* -DestinationPath app.zip

      - id: upload
        name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-webapp
          path: app.zip

      - id: deploy
        name: Deploy using nssm (Recommended)
        run: |
          $serviceName = "BuildWebApp"
          $deployDir = "$env:USERPROFILE\BuildWebApp_deploy"
          
          # Download nssm
          $nssmDir = "$env:TEMP\nssm"
          $nssmExe = "$nssmDir\win64\nssm.exe"
          
          if (!(Test-Path $nssmExe)) {
              Write-Host "Downloading nssm..."
              $nssmZip = "$env:TEMP\nssm.zip"
              Invoke-WebRequest "https://nssm.cc/ci/nssm-2.24-101-g897c7ad.zip" -OutFile $nssmZip
              Expand-Archive -Path $nssmZip -DestinationPath $nssmDir -Force
          }
          
          # Clean and deploy
          if (Test-Path $deployDir) { 
              Remove-Item "$deployDir\*" -Recurse -Force -ErrorAction SilentlyContinue 
          } else { 
              New-Item -ItemType Directory -Path $deployDir -Force 
          }
          Copy-Item -Path ".\published\*" -Destination $deployDir -Recurse -Force
          
          # Stop and remove existing service
          & $nssmExe stop $serviceName -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 3
          & $nssmExe remove $serviceName confirm -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 2
          
          # Install with nssm - using the EXE file directly
          $exePath = Join-Path $deployDir "BuildWebApp.exe"
          
          Write-Host "Installing service with nssm..."
          & $nssmExe install $serviceName $exePath "--urls http://0.0.0.0:5000"
          
          # Configure nssm service settings
          & $nssmExe set $serviceName DisplayName "Build Web App"
          & $nssmExe set $serviceName Description "Build Web Application Service"
          & $nssmExe set $serviceName Start SERVICE_AUTO_START
          & $nssmExe set $serviceName AppDirectory $deployDir
          & $nssmExe set $serviceName AppStdout "$deployDir\service.log"
          & $nssmExe set $serviceName AppStderr "$deployDir\service_error.log"
          & $nssmExe set $serviceName AppRotateFiles 1
          & $nssmExe set $serviceName AppRotateOnline 1
          & $nssmExe set $serviceName AppRotateSeconds 86400
          & $nssmExe set $serviceName AppRotateBytes 1048576
          
          # Set service to restart on failure
          & $nssmExe set $serviceName AppExit Default Restart
          & $nssmExe set $serviceName AppThrottle 15000
          
          # Start service
          Write-Host "Starting service..."
          & $nssmExe start $serviceName
          
          # Wait and check status
          Start-Sleep -Seconds 5
          $service = Get-Service $serviceName -ErrorAction SilentlyContinue
          
          if ($service -and $service.Status -eq 'Running') {
              Write-Host "SUCCESS: Service is running with nssm!"
              
              # Test the application
              Start-Sleep -Seconds 3
              try {
                  $response = Invoke-WebRequest -Uri "http://localhost:5000" -TimeoutSec 10 -ErrorAction SilentlyContinue
                  Write-Host "Service is responding on port 5000. Status: $($response.StatusCode)"
              } catch {
                  Write-Host "Service might be starting... check logs in: $deployDir\service.log"
              }
              
              # Show recent logs
              if (Test-Path "$deployDir\service.log") {
                  Write-Host "=== Recent Service Logs ==="
                  Get-Content "$deployDir\service.log" -Tail 10 -ErrorAction SilentlyContinue
              }
          } else {
              Write-Host "Service failed to start. Checking logs..."
              
              if (Test-Path "$deployDir\service_error.log") {
                  Write-Host "=== Service Error Logs ==="
                  Get-Content "$deployDir\service_error.log" -ErrorAction SilentlyContinue
              }
              
              if (Test-Path "$deployDir\service.log") {
                  Write-Host "=== Service Logs ==="
                  Get-Content "$deployDir\service.log" -ErrorAction SilentlyContinue
              }
              
              # Check event logs
              Get-EventLog -LogName Application -Newest 10 | 
                  Where-Object { $_.Source -eq ".NET Runtime" } |
                  Format-Table TimeGenerated, EntryType, Message -Wrap -AutoSize
          }