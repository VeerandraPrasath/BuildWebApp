name: Build Web App

on:
  workflow_dispatch:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        
      - name: Restore dependencies
        run: dotnet restore

      - id: build
        name: Build
        run: dotnet build --no-restore

      - id: test
        if: steps.build.outcome == 'success'
        name: Test with Coverage
        run: dotnet test "BuildWebApp.Tests/BuildWebApp.Tests.csproj" --collect:"XPlat Code Coverage" --results-directory TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura


      - name: Debug TestResults
        run: |
          echo "Listing TestResults directory:"
          ls -R TestResults || echo "No TestResults directory found"
          echo "Searching for cobertura files:"
          find . -name "*.cobertura.xml" || echo "No cobertura files found"

      - id: coverage
        name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: TestResults/**/coverage.cobertura.xml
          badge: false
          fail_below_min: false
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: console

      - id: publish
        name: Publish
        run: dotnet publish "BuildWebApp/BuildWebApp.csproj" -c Release -o published --self-contained -r linux-x64 /p:UseAppHost=true

      - name: Zip Artifact
        run: zip -r app.zip published

      - id: upload
        name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-webapp
          path: app.zip


      - id: deploy
        name: Deploy Locally (Self-Host)
        run: |
          # Stop any running instance of the app
          echo "Stopping existing BuildWebApp process (if any)..."
          pkill -f "BuildWebApp" || true

          # Ensure deployment folder exists
          DEPLOY_DIR="$HOME/BuildWebApp_deploy"
          mkdir -p $DEPLOY_DIR

          # Copy published files to deploy folder
          echo "Copying published files to $DEPLOY_DIR..."
          cp -r published/* $DEPLOY_DIR/

          # Start the app in background
          echo "Starting BuildWebApp..."
          nohup $DEPLOY_DIR/BuildWebApp > $DEPLOY_DIR/app.log 2>&1 &

          echo "Deployment complete. App running in background."

      
      # - id: publish
      #   name: Publish
      #   run: dotnet publish "BuildWebApp/BuildWebApp.csproj" -c Release -o published --self-contained -r linux-x64 /p:UseAppHost=true

      # - name: Zip Artifact
      #   run: zip app.zip ./publish

      # - id: upload
      #   name: Upload Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: dotnet-webapp
      #     path: app.zip
