name: Build Web App

on:
  workflow_dispatch:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies
        run: dotnet restore

      - id: build
        name: Build
        run: dotnet build --no-restore

      - id: test
        if: steps.build.outcome == 'success'
        name: Test with Coverage
        run: dotnet test "BuildWebApp.Tests/BuildWebApp.Tests.csproj" --collect:"XPlat Code Coverage" --results-directory TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Debug TestResults
        run: |
          Write-Host "Listing TestResults directory:"
          Get-ChildItem -Recurse TestResults -ErrorAction SilentlyContinue
          Write-Host "Searching for cobertura files:"
          Get-ChildItem -Recurse -Filter *.cobertura.xml

      - name: Code Coverage Summary (Windows)
        run: |
          $coverageFiles = Get-ChildItem -Recurse -Filter *.cobertura.xml
          if ($coverageFiles.Count -eq 0) {
              Write-Host "No coverage files found."
              exit 0
          }
      
          foreach ($file in $coverageFiles) {
              Write-Host "Coverage file: $($file.FullName)"
          }
      
          Write-Host "You can use ReportGenerator (dotnet tool) to generate a readable summary."


      - id: publish
        name: Publish
        run: dotnet publish BuildWebApp/BuildWebApp.csproj -c Release -o published --self-contained -r win-x64 /p:UseAppHost=true


      - name: Zip Artifact
        run: Compress-Archive -Path published\* -DestinationPath app.zip

      - id: upload
        name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-webapp
          path: app.zip

      - name: Debug Application Startup
        run: |
          $deployDir = "$env:USERPROFILE\BuildWebApp_deploy"
          
          # Test running the EXE directly
          Write-Host "=== Testing EXE directly ==="
          $exePath = Join-Path $deployDir "BuildWebApp.exe"
          $process = Start-Process -FilePath $exePath -ArgumentList "--urls http://0.0.0.0:5000" -PassThru -NoNewWindow
          Start-Sleep -Seconds 5
          
          if (!$process.HasExited) {
              Write-Host "EXE started successfully. PID: $($process.Id)"
              try {
                  $response = Invoke-WebRequest -Uri "http://localhost:5000" -TimeoutSec 5
                  Write-Host "EXE is responding on port 5000"
              } catch {
                  Write-Host "EXE is running but not responding: $($_.Exception.Message)"
              }
              Stop-Process -Id $process.Id -Force
          } else {
              Write-Host "EXE failed to start. Exit code: $($process.ExitCode)"
          }
          
          # Test running via dotnet CLI
          Write-Host "=== Testing via dotnet CLI ==="
          $dllFile = Get-ChildItem -Path $deployDir -Filter "BuildWebApp.dll" | Select-Object -First 1
          if ($dllFile) {
              $process = Start-Process -FilePath "dotnet" -ArgumentList "`"$($dllFile.FullName)`" --urls http://0.0.0.0:5000" -PassThru -NoNewWindow
              Start-Sleep -Seconds 5
              
              if (!$process.HasExited) {
                  Write-Host "Dotnet started successfully. PID: $($process.Id)"
                  try {
                      $response = Invoke-WebRequest -Uri "http://localhost:5000" -TimeoutSec 5
                      Write-Host "Dotnet is responding on port 5000"
                  } catch {
                      Write-Host "Dotnet is running but not responding: $($_.Exception.Message)"
                  }
                  Stop-Process -Id $process.Id -Force
              } else {
                  Write-Host "Dotnet failed to start. Exit code: $($process.ExitCode)"
              }
          }