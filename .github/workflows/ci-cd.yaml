name: Build Web App

on:
  workflow_dispatch:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies
        run: dotnet restore

      - id: build
        name: Build
        run: dotnet build --no-restore

      - id: test
        if: steps.build.outcome == 'success'
        name: Test with Coverage
        run: dotnet test "BuildWebApp.Tests/BuildWebApp.Tests.csproj" --collect:"XPlat Code Coverage" --results-directory TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Debug TestResults
        run: |
          Write-Host "Listing TestResults directory:"
          Get-ChildItem -Recurse TestResults -ErrorAction SilentlyContinue
          Write-Host "Searching for cobertura files:"
          Get-ChildItem -Recurse -Filter *.cobertura.xml

      - name: Code Coverage Summary (Windows)
        run: |
          $coverageFiles = Get-ChildItem -Recurse -Filter *.cobertura.xml
          if ($coverageFiles.Count -eq 0) {
              Write-Host "No coverage files found."
              exit 0
          }
      
          foreach ($file in $coverageFiles) {
              Write-Host "Coverage file: $($file.FullName)"
          }
      
          Write-Host "You can use ReportGenerator (dotnet tool) to generate a readable summary."


      - id: publish
        name: Publish
        run: dotnet publish BuildWebApp/BuildWebApp.csproj -c Release -o published --self-contained -r win-x64 /p:UseAppHost=true


      - name: Zip Artifact
        run: Compress-Archive -Path published\* -DestinationPath app.zip

      - id: upload
        name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-webapp
          path: app.zip

      - id: deploy
        name: Deploy & Run as Windows Service (Self-Host)
        shell: powershell
        run: |
         # Deployment folder
         $deployDir = "$env:USERPROFILE\BuildWebApp_deploy"
         if (!(Test-Path $deployDir)) { New-Item -ItemType Directory -Path $deployDir }
         
         # Copy published files
         Write-Host "Copying published files to $deployDir..."
         Copy-Item -Path ".\published\*" -Destination $deployDir -Recurse -Force
         
         # Stop and delete existing service if it exists
         Write-Host "Stopping and deleting existing service if present..."
         sc.exe stop BuildWebAppService 2>$null
         sc.exe delete BuildWebAppService 2>$null
         
         # Paths
         $dllPath = Join-Path $deployDir "BuildWebApp.dll"
         $dotnetExe = "C:\Program Files\dotnet\dotnet.exe"
         
         # Properly format binPath for SC with quotes around paths
         # Important: binPath= must have a space after the equal sign
         $binPath = "`"$dotnetExe`" `"$dllPath`" --urls http://0.0.0.0:5000"
         
         Write-Host "Creating Windows Service for BuildWebApp..."
         # Notice the space after binPath=
         sc.exe create BuildWebAppService binPath= $binPath start= auto
         
         # Start the service
         Write-Host "Starting Windows Service..."
         sc.exe start BuildWebAppService
         
         Write-Host "Deployment complete. App is running as a Windows Service on http://localhost:5000"








