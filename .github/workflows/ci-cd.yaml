name: Build Web App

on:
  workflow_dispatch:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies
        run: dotnet restore

      - id: build
        name: Build
        run: dotnet build --no-restore

      - id: test
        if: steps.build.outcome == 'success'
        name: Test with Coverage
        run: dotnet test "BuildWebApp.Tests/BuildWebApp.Tests.csproj" --collect:"XPlat Code Coverage" --results-directory TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Debug TestResults
        run: |
          Write-Host "Listing TestResults directory:"
          Get-ChildItem -Recurse TestResults -ErrorAction SilentlyContinue
          Write-Host "Searching for cobertura files:"
          Get-ChildItem -Recurse -Filter *.cobertura.xml

      - name: Code Coverage Summary (Windows)
        run: |
          $coverageFiles = Get-ChildItem -Recurse -Filter *.cobertura.xml
          if ($coverageFiles.Count -eq 0) {
              Write-Host "No coverage files found."
              exit 0
          }
      
          foreach ($file in $coverageFiles) {
              Write-Host "Coverage file: $($file.FullName)"
          }
      
          Write-Host "You can use ReportGenerator (dotnet tool) to generate a readable summary."


      - id: publish
        name: Publish
        run: dotnet publish BuildWebApp/BuildWebApp.csproj -c Release -o published --self-contained -r win-x64 /p:UseAppHost=true


      - name: Zip Artifact
        run: Compress-Archive -Path published\* -DestinationPath app.zip

      - id: upload
        name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-webapp
          path: app.zip

      - id: deploy
        name: Deploy & Debug Service Startup
        run: |
          $serviceName = "BuildWebApp"
          $deployDir = "$env:USERPROFILE\BuildWebApp_deploy"
          
          # Clean deployment
          if (Test-Path $deployDir) { 
              Remove-Item "$deployDir\*" -Recurse -Force -ErrorAction SilentlyContinue 
          } else { 
              New-Item -ItemType Directory -Path $deployDir -Force 
          }
      
          # Copy files
          Copy-Item -Path ".\published\*" -Destination $deployDir -Recurse -Force
      
          # Test the application manually first
          Write-Host "=== Testing application manually ==="
          $exePath = Join-Path $deployDir "BuildWebApp.exe"
          
          # Test if the app runs correctly
          Write-Host "Testing application execution..."
          $process = Start-Process -FilePath $exePath -ArgumentList "--urls http://0.0.0.0:5000" -PassThru -NoNewWindow
          Start-Sleep -Seconds 5
          
          # Check if process is running
          if (!$process.HasExited) {
              Write-Host "Application started successfully manually. Process ID: $($process.Id)"
              
              # Test if the app is responding
              try {
                  $response = Invoke-WebRequest -Uri "http://localhost:5000" -TimeoutSec 10 -ErrorAction SilentlyContinue
                  Write-Host "Application is responding on port 5000. Status: $($response.StatusCode)"
              } catch {
                  Write-Host "Application is running but not responding on port 5000. Error: $($_.Exception.Message)"
              }
              
              # Stop the manual process
              Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
              Write-Host "Stopped manual test process"
          } else {
              Write-Host "Application failed to start manually. Exit code: $($process.ExitCode)"
          }
      
          # Remove existing service
          $existingService = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
          if ($existingService) {
              Write-Host "Removing existing service..."
              Stop-Service $serviceName -Force -ErrorAction SilentlyContinue
              sc.exe delete $serviceName
              Start-Sleep -Seconds 3
          }
      
          # Install service with proper configuration
          Write-Host "=== Installing Windows Service ==="
          
          # Use LocalSystem account which has more privileges
          sc.exe create $serviceName `
              binPath= "`"$exePath`" --urls http://0.0.0.0:5000" `
              displayname= "Build Web App" `
              start= auto `
              obj= "LocalSystem" `
              depend= "HTTP/WebServiceAgent"
          
          # Configure service recovery options
          sc.exe failure $serviceName reset= 60 actions= restart/5000/restart/5000/restart/5000
          sc.exe failureflag $serviceName 1
          
          # Set service description
          sc.exe description $serviceName "Build Web Application Service"
          
          Write-Host "Service installed. Starting..."
          
          # Start service with longer timeout
          $timeout = 60
          $startTime = Get-Date
          Start-Service $serviceName
          
          # Wait for service to start
          do {
              Start-Sleep -Seconds 2
              $service = Get-Service $serviceName
              Write-Host "Service status: $($service.Status)"
              
              if ((Get-Date) - $startTime -gt [TimeSpan]::FromSeconds($timeout)) {
                  Write-Host "Service start timeout reached"
                  break
              }
          } while ($service.Status -eq 'StartPending')
          
          if ($service.Status -eq 'Running') {
              Write-Host "SUCCESS: Service is running!"
              
              # Verify the service is actually working
              Start-Sleep -Seconds 3
              try {
                  $response = Invoke-WebRequest -Uri "http://localhost:5000" -TimeoutSec 10 -ErrorAction SilentlyContinue
                  Write-Host "Service is responding on port 5000. Status: $($response.StatusCode)"
              } catch {
                  Write-Host "WARNING: Service is running but not responding on port 5000"
              }
          } else {
              Write-Host "FAILED: Service could not start. Current status: $($service.Status)"
              
              # Get detailed error information
              Write-Host "=== Checking Event Logs for Errors ==="
              Get-EventLog -LogName Application -Newest 20 | 
                  Where-Object { $_.Source -like "*BuildWebApp*" -or $_.Message -like "*BuildWebApp*" -or $_.Source -eq ".NET Runtime" } |
                  Format-Table TimeGenerated, EntryType, Source, Message -Wrap -AutoSize
              
              Write-Host "=== Service Control Manager Events ==="
              Get-EventLog -LogName System -Source "Service Control Manager" -Newest 10 |
                  Where-Object { $_.Message -like "*BuildWebApp*" } |
                  Format-Table TimeGenerated, EntryType, Message -Wrap -AutoSize
          }